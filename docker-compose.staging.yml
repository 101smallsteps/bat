version: "3"
services:
  bat_backend_1:
    restart: always
#    network_mode: "host"
#    command: gunicorn core.wsgi:application --bind 64.23.200.34:8000
    command: python manage.py runserver 64.23.200.34:8000
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - ./.env.staging
      - ./.env.staging.1
    expose:
      - 8000
#    ports:
#      - 8080:8000
    volumes:
    - static_volume:/home/app/web/staticfiles
    - media_volume:/home/app/web/mediafiles
    depends_on:
      - fin_db_server_1

  bat_backend_2:
    restart: always
#    network_mode: "host"
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - ./.env.staging
      - ./.env.staging.2
    expose:
      - 8000
#    ports:
#      - 8080:8000
    volumes:
    - static_volume:/home/app/web/staticfiles
    - media_volume:/home/app/web/mediafiles
    depends_on:
      - fin_db_server_2

  fin_db_server_1:
    restart: always
    build: ./postgres
#    image: postgres:15
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    env_file:
      - ./.env.db.staging
    ports:
      - 5431:5432

  fin_db_server_2:
    restart: always
    build: ./postgres
#    image: postgres:15
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    env_file:
      - ./.env.db.staging
    ports:
      - 5432:5432

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:5050"

  nginx:
    container_name: nginx
    build: ./nginx
    restart: always
    ports:
      - 443:443
      - 80:80
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/nginx.conf:ro
      - /var/www/html:/var/www/html
    depends_on:
      - bat_backend_1
      - bat_backend_2

volumes:
  static_volume:
  postgresql_data:
  media_volume:
  certs:
  html:
  vhost:
  acme: